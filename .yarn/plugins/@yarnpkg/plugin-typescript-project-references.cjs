/* eslint-disable */
//prettier-ignore
module.exports = {
name: "@yarnpkg/plugin-typescript-project-references",
factory: function (require) {
var plugin=(()=>{var c=Object.defineProperty;var y=Object.getOwnPropertyDescriptor;var g=Object.getOwnPropertyNames;var P=Object.prototype.hasOwnProperty;var p=(e=>typeof require<"u"?require:typeof Proxy<"u"?new Proxy(e,{get:(o,r)=>(typeof require<"u"?require:o)[r]}):e)(function(e){if(typeof require<"u")return require.apply(this,arguments);throw new Error('Dynamic require of "'+e+'" is not supported')});var k=(e,o)=>{for(var r in o)c(e,r,{get:o[r],enumerable:!0})},u=(e,o,r,s)=>{if(o&&typeof o=="object"||typeof o=="function")for(let t of g(o))!P.call(e,t)&&t!==r&&c(e,t,{get:()=>o[t],enumerable:!(s=y(o,t))||s.enumerable});return e};var h=e=>u(c({},"__esModule",{value:!0}),e);var C={};k(C,{default:()=>j});var l=p("@yarnpkg/core"),n=p("@yarnpkg/fslib"),f=e=>n.ppath.join(e.cwd,"tsconfig.json"),W=({project:e,workspace:o})=>l.miscUtils.mapAndFilter(o.anchoredPackage.dependencies,([,r])=>{let s=e.tryWorkspaceByDescriptor(r);return!s||s===o?l.miscUtils.mapAndFilter.skip:s}),w=({referencedWorkspaces:e,tsconfig:o})=>{let r=!1,s;if(e.length===0)o.references!=null&&(r=!0);else{let t=new Set(o.references?.map(a=>a.path));s=e.map(a=>(t.has(a)||(r=!0),{path:a}))}return{modified:r,references:s}},x=async({project:e,workspace:o})=>{let r=f(o);if(!await n.xfs.existsPromise(r))return;let s=W({project:e,workspace:o}).filter(i=>n.xfs.existsSync(f(i))).map(i=>n.ppath.relative(o.cwd,i.cwd)),t=await n.xfs.readJsonPromise(r),{modified:a,references:m}=w({referencedWorkspaces:s,tsconfig:t});a&&await n.xfs.writeJsonPromise(r,{...t,references:m})},d=e=>{Promise.all(e.workspaces.map(async o=>{await x({project:e,workspace:o})})).catch(()=>({}))};var J={hooks:{afterAllInstalled:d}},j=J;return h(C);})();
return plugin;
}
};
