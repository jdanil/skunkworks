/* eslint-disable */
//prettier-ignore
module.exports = {
name: "@yarnpkg/plugin-typescript-project-references",
factory: function (require) {
var plugin=(()=>{var W=Object.create,i=Object.defineProperty,w=Object.defineProperties,x=Object.getOwnPropertyDescriptor,J=Object.getOwnPropertyDescriptors,j=Object.getOwnPropertyNames,p=Object.getOwnPropertySymbols,C=Object.getPrototypeOf,d=Object.prototype.hasOwnProperty,T=Object.prototype.propertyIsEnumerable;var m=(e,o,r)=>o in e?i(e,o,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[o]=r,y=(e,o)=>{for(var r in o||(o={}))d.call(o,r)&&m(e,r,o[r]);if(p)for(var r of p(o))T.call(o,r)&&m(e,r,o[r]);return e},g=(e,o)=>w(e,J(o)),b=e=>i(e,"__esModule",{value:!0});var k=e=>{if(typeof require!="undefined")return require(e);throw new Error('Dynamic require of "'+e+'" is not supported')};var A=(e,o)=>{for(var r in o)i(e,r,{get:o[r],enumerable:!0})},H=(e,o,r)=>{if(o&&typeof o=="object"||typeof o=="function")for(let s of j(o))!d.call(e,s)&&s!=="default"&&i(e,s,{get:()=>o[s],enumerable:!(r=x(o,s))||r.enumerable});return e},P=e=>H(b(i(e!=null?W(C(e)):{},"default",e&&e.__esModule&&"default"in e?{get:()=>e.default,enumerable:!0}:{value:e,enumerable:!0})),e);var v={};A(v,{default:()=>U});var f=P(k("@yarnpkg/core")),t=P(k("@yarnpkg/fslib")),h=e=>t.ppath.join(e.cwd,"tsconfig.json"),F=({project:e,workspace:o})=>f.miscUtils.mapAndFilter(o.dependencies,([r,s])=>{let n=e.tryWorkspaceByDescriptor(s);return!n||n===o?f.miscUtils.mapAndFilter.skip:n}),I=({referencedWorkspaces:e,tsconfig:o})=>{var n;let r=!1,s;if(e.length===0)typeof o.references!="undefined"&&(r=!0);else{let c=new Set((n=o.references)==null?void 0:n.map(a=>a.path));s=e.map(a=>(c.has(a)||(r=!0),{path:a}))}return{modified:r,references:s}},R=async({project:e,workspace:o})=>{let r=h(o);if(!await t.xfs.existsPromise(r))return;let s=F({project:e,workspace:o}).filter(l=>t.xfs.existsSync(h(l))).map(l=>t.ppath.relative(o.cwd,l.cwd)),n=await t.xfs.readJsonPromise(r),{modified:c,references:a}=I({referencedWorkspaces:s,tsconfig:n});c&&await t.xfs.writeJsonPromise(r,g(y({},n),{references:a}))},u=e=>{Promise.all(e.workspaces.map(async o=>{await R({project:e,workspace:o})})).catch(()=>({}))};var S={hooks:{afterAllInstalled:u}},U=S;return v;})();
return plugin;
}
};
