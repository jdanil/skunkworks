/* eslint-disable */
//prettier-ignore
module.exports = {
name: "@yarnpkg/plugin-typescript-project-references",
factory: function (require) {
var plugin=(()=>{var c=Object.defineProperty;var y=Object.getOwnPropertyDescriptor;var g=Object.getOwnPropertyNames;var k=Object.prototype.hasOwnProperty;var p=(e=>typeof require<"u"?require:typeof Proxy<"u"?new Proxy(e,{get:(o,r)=>(typeof require<"u"?require:o)[r]}):e)(function(e){if(typeof require<"u")return require.apply(this,arguments);throw new Error('Dynamic require of "'+e+'" is not supported')});var P=(e,o)=>{for(var r in o)c(e,r,{get:o[r],enumerable:!0})},h=(e,o,r,t)=>{if(o&&typeof o=="object"||typeof o=="function")for(let s of g(o))!k.call(e,s)&&s!==r&&c(e,s,{get:()=>o[s],enumerable:!(t=y(o,s))||t.enumerable});return e};var u=e=>h(c({},"__esModule",{value:!0}),e);var C={};P(C,{default:()=>j});var l=p("@yarnpkg/core"),n=p("@yarnpkg/fslib"),f=e=>n.ppath.join(e.cwd,"tsconfig.json"),W=({project:e,workspace:o})=>l.miscUtils.mapAndFilter(o.anchoredPackage.dependencies,([r,t])=>{let s=e.tryWorkspaceByDescriptor(t);return!s||s===o?l.miscUtils.mapAndFilter.skip:s}),w=({referencedWorkspaces:e,tsconfig:o})=>{let r=!1,t;if(e.length===0)o.references!=null&&(r=!0);else{let s=new Set(o.references?.map(a=>a.path));t=e.map(a=>(s.has(a)||(r=!0),{path:a}))}return{modified:r,references:t}},x=async({project:e,workspace:o})=>{let r=f(o);if(!await n.xfs.existsPromise(r))return;let t=W({project:e,workspace:o}).filter(i=>n.xfs.existsSync(f(i))).map(i=>n.ppath.relative(o.cwd,i.cwd)),s=await n.xfs.readJsonPromise(r),{modified:a,references:m}=w({referencedWorkspaces:t,tsconfig:s});a&&await n.xfs.writeJsonPromise(r,{...s,references:m})},d=e=>{Promise.all(e.workspaces.map(async o=>{await x({project:e,workspace:o})})).catch(()=>({}))};var J={hooks:{afterAllInstalled:d}},j=J;return u(C);})();
return plugin;
}
};
