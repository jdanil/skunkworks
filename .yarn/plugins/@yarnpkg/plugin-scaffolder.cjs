/* eslint-disable */
//prettier-ignore
module.exports = {
name: "@yarnpkg/plugin-scaffolder",
factory: function (require) {
var plugin=(()=>{var j=Object.create,w=Object.defineProperty;var A=Object.getOwnPropertyDescriptor;var N=Object.getOwnPropertyNames;var I=Object.getPrototypeOf,F=Object.prototype.hasOwnProperty;var U=e=>w(e,"__esModule",{value:!0});var d=e=>{if(typeof require!="undefined")return require(e);throw new Error('Dynamic require of "'+e+'" is not supported')};var q=(e,t)=>{for(var r in t)w(e,r,{get:t[r],enumerable:!0})},L=(e,t,r)=>{if(t&&typeof t=="object"||typeof t=="function")for(let a of N(t))!F.call(e,a)&&a!=="default"&&w(e,a,{get:()=>t[a],enumerable:!(r=A(t,a))||r.enumerable});return e},m=e=>L(U(w(e!=null?j(I(e)):{},"default",e&&e.__esModule&&"default"in e?{get:()=>e.default,enumerable:!0}:{value:e,enumerable:!0})),e);var D={};q(D,{default:()=>z});var S=m(d("@yarnpkg/core"));var C=m(d("child_process")),h=m(d("fs")),f=m(d("path")),T=m(d("@yarnpkg/cli")),k=m(d("@yarnpkg/core")),x=m(d("@yarnpkg/fslib")),c=m(d("clipanion"));var v=[],P=[];function b(e,t){if(e===t)return 0;let r=e;e.length>t.length&&(e=t,t=r);let a=e.length,i=t.length;for(;a>0&&e.charCodeAt(~-a)===t.charCodeAt(~-i);)a--,i--;let o=0;for(;o<a&&e.charCodeAt(o)===t.charCodeAt(o);)o++;if(a-=o,i-=o,a===0)return i;let u,s,p,l,n=0,y=0;for(;n<a;)P[n]=e.charCodeAt(o+n),v[n]=++n;for(;y<i;)for(u=t.charCodeAt(o+y),p=y++,s=y,n=0;n<a;n++)l=u===P[n]?p:p+1,p=v[n],s=v[n]=p>s?l>s?s+1:l:l>p?p+1:l;return s}var g=class extends T.BaseCommand{constructor(){super(...arguments);this.name=c.Option.String("--name",{description:"Name of the package (in kebab-case)",required:!0});this.template=c.Option.String("--template",{description:"Name of the template to use to bootstrap the package",required:!0});this.destination=c.Option.String("--destination",{description:"Destination path of the package",required:!1})}async execute(){let t=await k.Configuration.find(this.context.cwd,this.context.plugins);if(!t.projectCwd)throw new c.UsageError("This command must be run from within a project folder.");let r=x.npath.fromPortablePath(t.projectCwd),{templates:a,source:i,destination:o}=await this.getPaths({configuration:t,projectCwd:r});if(!(0,h.existsSync)(i))throw new c.UsageError(`Invalid template "${this.template}"; source path does not exist. Please select from: ${(0,h.readdirSync)(a).join(", ")}.`);(0,h.cpSync)(i,o,{recursive:!0}),(0,C.execSync)("git add .",{cwd:o}),(0,C.execSync)("yarn install",{cwd:r})}async getPaths({configuration:t,projectCwd:r}){let{project:a}=await k.Project.find(t,this.context.cwd),i=x.npath.fromPortablePath(this.context.cwd),o=(0,f.join)(r,a.configuration.get("scaffolderTemplateFolder")),u=(0,f.join)(o,this.template),[s]=a.topLevelWorkspace.manifest.workspaceDefinitions.map(l=>l.pattern.replace("*","").replace(/(?<slash>\/)(?=\/*\1)/u,"").replace(/\/$/u,"")).sort((l,n)=>b(this.template,l)-b(this.template,n));return{destination:(0,f.join)(this.destination==null?s==null?i:(0,f.join)(r,s):this.destination==="."?i:(0,f.join)(r,this.destination),this.name),source:u,templates:o}}};g.paths=[["scaffolder","bootstrap"]],g.usage=c.Command.Usage({category:"Scaffolder commands",description:"bootstrap a new package from a template",details:"\n      This command will bootstrap a new package from a given template. Templates are sourced from the configured `scaffolderTemplateFolder`.\n\n      - If `--destination` is not set, the new package will be created under the closest matching workspace directory to the given template.\n\n      - If `--destination` is set, the new package will be created under the given directory.\n\n      - If `--destination` is set to `.`, the new package will be created under the current working directory.\n    ",examples:[["Create a new library package under the closest matching workspace directory to the given template","yarn scaffolder bootstrap --name=new-library --template=library"],["Create a new library package under the current working directory","yarn scaffolder bootstrap --name=new-library --template=library --destination=."],["Create a new library package under the given directory","yarn scaffolder bootstrap --name=new-library --template=library --destination=libraries"]]});var $={commands:[g],configuration:{scaffolderTemplateFolder:{default:"templates",description:"The folder containing templates from which the scaffolder bases bootstrapped packages from.",isNullable:!1,type:S.SettingsType.STRING}}},z=$;return D;})();
return plugin;
}
};
