/* eslint-disable */
//prettier-ignore
module.exports = {
name: "@yarnpkg/plugin-scaffolder",
factory: function (require) {
var plugin=(()=>{var J=Object.create,y=Object.defineProperty,U=Object.defineProperties,q=Object.getOwnPropertyDescriptor,L=Object.getOwnPropertyDescriptors,M=Object.getOwnPropertyNames,j=Object.getOwnPropertySymbols,O=Object.getPrototypeOf,N=Object.prototype.hasOwnProperty,$=Object.prototype.propertyIsEnumerable;var T=(t,e,a)=>e in t?y(t,e,{enumerable:!0,configurable:!0,writable:!0,value:a}):t[e]=a,P=(t,e)=>{for(var a in e||(e={}))N.call(e,a)&&T(t,a,e[a]);if(j)for(var a of j(e))$.call(e,a)&&T(t,a,e[a]);return t},C=(t,e)=>U(t,L(e)),z=t=>y(t,"__esModule",{value:!0});var h=t=>{if(typeof require!="undefined")return require(t);throw new Error('Dynamic require of "'+t+'" is not supported')};var D=(t,e)=>{for(var a in e)y(t,a,{get:e[a],enumerable:!0})},E=(t,e,a)=>{if(e&&typeof e=="object"||typeof e=="function")for(let r of M(e))!N.call(t,r)&&r!=="default"&&y(t,r,{get:()=>e[r],enumerable:!(a=q(e,r))||a.enumerable});return t},f=t=>E(z(y(t!=null?J(O(t)):{},"default",t&&t.__esModule&&"default"in t?{get:()=>t.default,enumerable:!0}:{value:t,enumerable:!0})),t);var V={};D(V,{default:()=>R});var I=f(h("@yarnpkg/core"));var k=f(h("child_process")),p=f(h("fs")),l=f(h("path")),F=f(h("@yarnpkg/cli")),v=f(h("@yarnpkg/core")),S=f(h("@yarnpkg/fslib")),m=f(h("clipanion"));var x=[],A=[];function b(t,e){if(t===e)return 0;let a=t;t.length>e.length&&(t=e,e=a);let r=t.length,o=e.length;for(;r>0&&t.charCodeAt(~-r)===e.charCodeAt(~-o);)r--,o--;let i=0;for(;i<r&&t.charCodeAt(i)===e.charCodeAt(i);)i++;if(r-=i,o-=i,r===0)return o;let g,s,c,d,n=0,w=0;for(;n<r;)A[n]=t.charCodeAt(i+n),x[n]=++n;for(;w<o;)for(g=e.charCodeAt(i+w),c=w++,s=w,n=0;n<r;n++)d=g===A[n]?c:c+1,c=x[n],s=x[n]=c>s?d>s?s+1:d:d>c?c+1:d;return s}var u=class extends F.BaseCommand{constructor(){super(...arguments);this.name=m.Option.String("--name",{description:"Name of the package (in kebab-case)",required:!0});this.template=m.Option.String("--template",{description:"Name of the template to use to bootstrap the package",required:!0});this.destination=m.Option.String("--destination",{description:"Destination path of the package",required:!1})}async execute(){let e=await v.Configuration.find(this.context.cwd,this.context.plugins);if(!e.projectCwd)throw new m.UsageError("This command must be run from within a project folder.");let a=S.npath.fromPortablePath(e.projectCwd),{templates:r,source:o,destination:i}=await this.getPaths({configuration:e,projectCwd:a});if(!(0,p.existsSync)(o))throw new m.UsageError(`Invalid template "${this.template}"; source path does not exist. Please select from: ${(0,p.readdirSync)(r).join(", ")}.`);this.initialisePackage({destination:i,projectCwd:a,source:o})}async getPaths({configuration:e,projectCwd:a}){let{project:r}=await v.Project.find(e,this.context.cwd),o=S.npath.fromPortablePath(this.context.cwd),i=(0,l.join)(a,r.configuration.get("scaffolderTemplateFolder")),g=(0,l.join)(i,this.template),[s]=r.topLevelWorkspace.manifest.workspaceDefinitions.map(d=>d.pattern.replace("*","").replace(/(?<slash>\/)(?=\/*\1)/u,"").replace(/\/$/u,"")).sort((d,n)=>b(this.template,d)-b(this.template,n));return{destination:(0,l.join)(this.destination==null?s==null?o:(0,l.join)(a,s):this.destination==="."?o:(0,l.join)(a,this.destination),this.name),source:g,templates:i}}updateManifest({destination:e,projectCwd:a}){var c;let r=(0,l.join)(e,"package.json"),o=JSON.parse((0,p.readFileSync)(r,{encoding:"utf-8"})),i=(c=o.name)==null?void 0:c.replace(this.template,this.name),g=e.replace(a,"").split(l.sep).join(l.posix.sep).replace(/^\//gu,""),s=typeof o.repository=="object"?C(P({},o.repository),{directory:g}):o.repository;(0,p.writeFileSync)(r,JSON.stringify(C(P({},o),{name:i,repository:s})))}initialisePackage({projectCwd:e,source:a,destination:r}){(0,p.cpSync)(a,r,{recursive:!0}),this.updateManifest({destination:r,projectCwd:e}),(0,k.execSync)("yarn install",{cwd:e}),(0,k.execSync)("yarn format package.json --write",{cwd:r}),(0,k.execSync)("git add .",{cwd:r})}};u.paths=[["scaffolder","bootstrap"]],u.usage=m.Command.Usage({category:"Scaffolder commands",description:"bootstrap a new package from a template",details:"\n      This command will bootstrap a new package from a given template. Templates are sourced from the configured `scaffolderTemplateFolder`.\n\n      - If `--destination` is not set, the new package will be created under the closest matching workspace directory to the given template.\n\n      - If `--destination` is set, the new package will be created under the given directory.\n\n      - If `--destination` is set to `.`, the new package will be created under the current working directory.\n    ",examples:[["Create a new library package under the closest matching workspace directory to the given template","yarn scaffolder bootstrap --name=new-library --template=library"],["Create a new library package under the current working directory","yarn scaffolder bootstrap --name=new-library --template=library --destination=."],["Create a new library package under the given directory","yarn scaffolder bootstrap --name=new-library --template=library --destination=libraries"]]});var G={commands:[u],configuration:{scaffolderTemplateFolder:{default:"templates",description:"The folder containing templates from which the scaffolder bases bootstrapped packages from.",isNullable:!1,type:I.SettingsType.STRING}}},R=G;return V;})();
return plugin;
}
};
