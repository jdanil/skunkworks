/* eslint-disable */
//prettier-ignore
module.exports = {
name: "@yarnpkg/plugin-scaffolder",
factory: function (require) {
var plugin=(()=>{var b=Object.defineProperty;var A=Object.getOwnPropertyDescriptor;var F=Object.getOwnPropertyNames;var I=Object.prototype.hasOwnProperty;var m=(t=>typeof require<"u"?require:typeof Proxy<"u"?new Proxy(t,{get:(e,o)=>(typeof require<"u"?require:e)[o]}):t)(function(t){if(typeof require<"u")return require.apply(this,arguments);throw Error('Dynamic require of "'+t+'" is not supported')});var J=(t,e)=>()=>(t&&(e=t(t=0)),e);var C=(t,e)=>{for(var o in e)b(t,o,{get:e[o],enumerable:!0})},U=(t,e,o,a)=>{if(e&&typeof e=="object"||typeof e=="function")for(let r of F(e))!I.call(t,r)&&r!==o&&b(t,r,{get:()=>e[r],enumerable:!(a=A(e,r))||a.enumerable});return t};var q=t=>U(b({},"__esModule",{value:!0}),t);var S={};C(S,{default:()=>x});function x(t,e){if(t===e)return 0;let o=t;t.length>e.length&&(t=e,e=o);let a=t.length,r=e.length;for(;a>0&&t.charCodeAt(~-a)===e.charCodeAt(~-r);)a--,r--;let i=0;for(;i<a&&t.charCodeAt(i)===e.charCodeAt(i);)i++;if(a-=i,r-=i,a===0)return r;let h,s,c,f,n=0,g=0;for(;n<a;)P[n]=t.charCodeAt(i+n),k[n]=++n;for(;g<r;)for(h=e.charCodeAt(i+g),c=g++,s=g,n=0;n<a;n++)f=h===P[n]?c:c+1,c=k[n],s=k[n]=c>s?f>s?s+1:f:f>c?c+1:f;return s}var k,P,j=J(()=>{k=[],P=[]});var $={};C($,{default:()=>O});var T=m("@yarnpkg/core");var y=m("child_process"),p=m("fs"),l=m("path"),N=m("@yarnpkg/cli"),w=m("@yarnpkg/core"),v=m("@yarnpkg/fslib"),d=m("clipanion"),u=class extends N.BaseCommand{static paths=[["scaffolder","bootstrap"]];static usage=d.Command.Usage({category:"Scaffolder commands",description:"bootstrap a new package from a template",details:"\n      This command will bootstrap a new package from a given template. Templates are sourced from the configured `scaffolderTemplateFolder`.\n\n      - If `--destination` is not set, the new package will be created under the closest matching workspace directory to the given template.\n\n      - If `--destination` is set, the new package will be created under the given directory.\n\n      - If `--destination` is set to `.`, the new package will be created under the current working directory.\n    ",examples:[["Create a new library package under the closest matching workspace directory to the given template","yarn scaffolder bootstrap --name=new-library --template=library"],["Create a new library package under the current working directory","yarn scaffolder bootstrap --name=new-library --template=library --destination=."],["Create a new library package under the given directory","yarn scaffolder bootstrap --name=new-library --template=library --destination=libraries"]]});name=d.Option.String("--name",{description:"Name of the package (in kebab-case)",required:!0});template=d.Option.String("--template",{description:"Name of the template to use to bootstrap the package",required:!0});destination=d.Option.String("--destination",{description:"Destination path of the package",required:!1});async execute(){let e=await w.Configuration.find(this.context.cwd,this.context.plugins);if(!e.projectCwd)throw new d.UsageError("This command must be run from within a project folder.");let o=v.npath.fromPortablePath(e.projectCwd),{templates:a,source:r,destination:i}=await this.#e({configuration:e,projectCwd:o});if(!(0,p.existsSync)(r))throw new d.UsageError(`Invalid template "${this.template}"; source path does not exist. Please select from: ${(0,p.readdirSync)(a).join(", ")}.`);this.#a({destination:i,projectCwd:o,source:r})}async#e({configuration:e,projectCwd:o}){let{project:a}=await w.Project.find(e,this.context.cwd),r=v.npath.fromPortablePath(this.context.cwd),i=(0,l.join)(o,a.configuration.get("scaffolderTemplateFolder")),h=(0,l.join)(i,this.template),{default:s}=await Promise.resolve().then(()=>(j(),S)),[c]=a.topLevelWorkspace.manifest.workspaceDefinitions.map(n=>n.pattern.replace("*","").replace(new RegExp("(?<slash>\\/)(?=\\/*\\k<slash>)","v"),"").replace(new RegExp("\\/$","v"),"")).sort((n,g)=>s(this.template,n)-s(this.template,g));return{destination:(0,l.join)(this.destination==null?c==null?r:(0,l.join)(o,c):this.destination==="."?r:(0,l.join)(o,this.destination),this.name),source:h,templates:i}}#t({destination:e,projectCwd:o}){let a=(0,l.join)(e,"package.json"),r=JSON.parse((0,p.readFileSync)(a,{encoding:"utf8"})),i=r.name?.replace(this.template,this.name),h=e.replace(o,"").split(l.sep).join(l.posix.sep).replaceAll(new RegExp("^\\/","gv"),""),s=typeof r.repository=="object"?{...r.repository,directory:h}:r.repository;(0,p.writeFileSync)(a,JSON.stringify({...r,name:i,repository:s}))}#a({projectCwd:e,source:o,destination:a}){(0,p.cpSync)(o,a,{recursive:!0}),this.#t({destination:a,projectCwd:e}),(0,y.execSync)("yarn install",{cwd:e}),(0,y.execSync)("yarn format package.json --write",{cwd:a}),(0,y.execSync)("git add .",{cwd:a})}};var L={commands:[u],configuration:{scaffolderTemplateFolder:{default:"templates",description:"The folder containing templates from which the scaffolder bases bootstrapped packages from.",isNullable:!1,type:T.SettingsType.STRING}}},O=L;return q($);})();
return plugin;
}
};
