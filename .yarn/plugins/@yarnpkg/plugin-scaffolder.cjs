/* eslint-disable */
//prettier-ignore
module.exports = {
name: "@yarnpkg/plugin-scaffolder",
factory: function (require) {
var plugin=(()=>{var w=Object.defineProperty;var L=Object.getOwnPropertyDescriptor;var O=Object.getOwnPropertyNames;var $=Object.prototype.hasOwnProperty;var z=(t,e,a)=>e in t?w(t,e,{enumerable:!0,configurable:!0,writable:!0,value:a}):t[e]=a;var f=(t=>typeof require<"u"?require:typeof Proxy<"u"?new Proxy(t,{get:(e,a)=>(typeof require<"u"?require:e)[a]}):t)(function(t){if(typeof require<"u")return require.apply(this,arguments);throw new Error('Dynamic require of "'+t+'" is not supported')});var D=(t,e)=>{for(var a in e)w(t,a,{get:e[a],enumerable:!0})},M=(t,e,a,o)=>{if(e&&typeof e=="object"||typeof e=="function")for(let r of O(e))!$.call(t,r)&&r!==a&&w(t,r,{get:()=>e[r],enumerable:!(o=L(e,r))||o.enumerable});return t};var E=t=>M(w({},"__esModule",{value:!0}),t);var u=(t,e,a)=>(z(t,typeof e!="symbol"?e+"":e,a),a),G=(t,e,a)=>{if(!e.has(t))throw TypeError("Cannot "+a)};var b=(t,e,a)=>{if(e.has(t))throw TypeError("Cannot add the same private member more than once");e instanceof WeakSet?e.add(t):e.set(t,a)};var k=(t,e,a)=>(G(t,e,"access private method"),a);var W={};D(W,{default:()=>V});var q=f("@yarnpkg/core");var C=f("child_process"),p=f("fs"),l=f("path"),F=f("@yarnpkg/cli"),S=f("@yarnpkg/core"),T=f("@yarnpkg/fslib"),h=f("clipanion");var N=[],A=[];function v(t,e){if(t===e)return 0;let a=t;t.length>e.length&&(t=e,e=a);let o=t.length,r=e.length;for(;o>0&&t.charCodeAt(~-o)===e.charCodeAt(~-r);)o--,r--;let i=0;for(;i<o&&t.charCodeAt(i)===e.charCodeAt(i);)i++;if(o-=i,r-=i,o===0)return r;let d,c,s,m,n=0,g=0;for(;n<o;)A[n]=t.charCodeAt(i+n),N[n]=++n;for(;g<r;)for(d=e.charCodeAt(i+g),s=g++,c=g,n=0;n<o;n++)m=d===A[n]?s:s+1,s=N[n],c=N[n]=s>c?m>c?c+1:m:m>s?s+1:m;return c}var P,I,x,J,j,U,y=class extends F.BaseCommand{constructor(){super(...arguments);b(this,P);b(this,x);b(this,j);u(this,"name",h.Option.String("--name",{description:"Name of the package (in kebab-case)",required:!0}));u(this,"template",h.Option.String("--template",{description:"Name of the template to use to bootstrap the package",required:!0}));u(this,"destination",h.Option.String("--destination",{description:"Destination path of the package",required:!1}))}async execute(){let a=await S.Configuration.find(this.context.cwd,this.context.plugins);if(!a.projectCwd)throw new h.UsageError("This command must be run from within a project folder.");let o=T.npath.fromPortablePath(a.projectCwd),{templates:r,source:i,destination:d}=await k(this,P,I).call(this,{configuration:a,projectCwd:o});if(!(0,p.existsSync)(i))throw new h.UsageError(`Invalid template "${this.template}"; source path does not exist. Please select from: ${(0,p.readdirSync)(r).join(", ")}.`);k(this,j,U).call(this,{destination:d,projectCwd:o,source:i})}};P=new WeakSet,I=async function({configuration:a,projectCwd:o}){let{project:r}=await S.Project.find(a,this.context.cwd),i=T.npath.fromPortablePath(this.context.cwd),d=(0,l.join)(o,r.configuration.get("scaffolderTemplateFolder")),c=(0,l.join)(d,this.template),[s]=r.topLevelWorkspace.manifest.workspaceDefinitions.map(n=>n.pattern.replace("*","").replace(/(?<slash>\/)(?=\/*\1)/u,"").replace(/\/$/u,"")).sort((n,g)=>v(this.template,n)-v(this.template,g));return{destination:(0,l.join)(this.destination==null?s==null?i:(0,l.join)(o,s):this.destination==="."?i:(0,l.join)(o,this.destination),this.name),source:c,templates:d}},x=new WeakSet,J=function({destination:a,projectCwd:o}){var m;let r=(0,l.join)(a,"package.json"),i=JSON.parse((0,p.readFileSync)(r,{encoding:"utf8"})),d=(m=i.name)==null?void 0:m.replace(this.template,this.name),c=a.replace(o,"").split(l.sep).join(l.posix.sep).replace(/^\//gu,""),s=typeof i.repository=="object"?{...i.repository,directory:c}:i.repository;(0,p.writeFileSync)(r,JSON.stringify({...i,name:d,repository:s}))},j=new WeakSet,U=function({projectCwd:a,source:o,destination:r}){(0,p.cpSync)(o,r,{recursive:!0}),k(this,x,J).call(this,{destination:r,projectCwd:a}),(0,C.execSync)("yarn install",{cwd:a}),(0,C.execSync)("yarn format package.json --write",{cwd:r}),(0,C.execSync)("git add .",{cwd:r})},u(y,"paths",[["scaffolder","bootstrap"]]),u(y,"usage",h.Command.Usage({category:"Scaffolder commands",description:"bootstrap a new package from a template",details:"\n      This command will bootstrap a new package from a given template. Templates are sourced from the configured `scaffolderTemplateFolder`.\n\n      - If `--destination` is not set, the new package will be created under the closest matching workspace directory to the given template.\n\n      - If `--destination` is set, the new package will be created under the given directory.\n\n      - If `--destination` is set to `.`, the new package will be created under the current working directory.\n    ",examples:[["Create a new library package under the closest matching workspace directory to the given template","yarn scaffolder bootstrap --name=new-library --template=library"],["Create a new library package under the current working directory","yarn scaffolder bootstrap --name=new-library --template=library --destination=."],["Create a new library package under the given directory","yarn scaffolder bootstrap --name=new-library --template=library --destination=libraries"]]}));var R={commands:[y],configuration:{scaffolderTemplateFolder:{default:"templates",description:"The folder containing templates from which the scaffolder bases bootstrapped packages from.",isNullable:!1,type:q.SettingsType.STRING}}},V=R;return E(W);})();
return plugin;
}
};
