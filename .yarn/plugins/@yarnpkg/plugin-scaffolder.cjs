/* eslint-disable */
//prettier-ignore
module.exports = {
name: "@yarnpkg/plugin-scaffolder",
factory: function (require) {
var plugin=(()=>{var P=Object.defineProperty;var A=Object.getOwnPropertyDescriptor;var D=Object.getOwnPropertyNames;var F=Object.prototype.hasOwnProperty;var g=(a=>typeof require<"u"?require:typeof Proxy<"u"?new Proxy(a,{get:(t,n)=>(typeof require<"u"?require:t)[n]}):a)(function(a){if(typeof require<"u")return require.apply(this,arguments);throw Error('Dynamic require of "'+a+'" is not supported')});var M=(a,t)=>{for(var n in t)P(a,n,{get:t[n],enumerable:!0})},J=(a,t,n,e)=>{if(t&&typeof t=="object"||typeof t=="function")for(let i of D(t))!F.call(a,i)&&i!==n&&P(a,i,{get:()=>t[i],enumerable:!(e=A(t,i))||e.enumerable});return a};var L=a=>J(P({},"__esModule",{value:!0}),a);var q={};M(q,{default:()=>U});var I=g("@yarnpkg/core");var k=g("child_process"),m=g("fs"),f=g("path"),T=g("@yarnpkg/cli"),x=g("@yarnpkg/core"),N=g("@yarnpkg/fslib"),u=g("clipanion");var y=[],S=[];function b(a,t,n){if(a===t)return 0;let e=n?.maxDistance,i=a;a.length>t.length&&(a=t,t=i);let r=a.length,o=t.length;for(;r>0&&a.charCodeAt(~-r)===t.charCodeAt(~-o);)r--,o--;let c=0;for(;c<r&&a.charCodeAt(c)===t.charCodeAt(c);)c++;if(r-=c,o-=c,e!==void 0&&o-r>e)return e;if(r===0)return e!==void 0&&o>e?e:o;let l,d,p,h,s=0,w=0;for(;s<r;)S[s]=a.charCodeAt(c+s),y[s]=++s;for(;w<o;){for(l=t.charCodeAt(c+w),p=w++,d=w,s=0;s<r;s++)h=l===S[s]?p:p+1,p=y[s],d=y[s]=p>d?h>d?d+1:h:h>p?p+1:h;if(e!==void 0){let C=d;for(s=0;s<r;s++)y[s]<C&&(C=y[s]);if(C>e)return e}}return y.length=r,S.length=r,e!==void 0&&d>e?e:d}function j(a,t,n){if(!Array.isArray(t)||t.length===0)return;let e=n?.maxDistance,i=a.length;for(let l of t)if(l===a)return l;if(e===0)return;let r,o=Number.POSITIVE_INFINITY,c=new Set;for(let l of t){if(c.has(l))continue;c.add(l);let d=Math.abs(l.length-i);if(d>=o||e!==void 0&&d>e)continue;let p=Number.isFinite(o)?e===void 0?o:Math.min(o,e):e,h=p===void 0?b(a,l):b(a,l,{maxDistance:p});if(e!==void 0&&h>e)continue;let s=h;if(p!==void 0&&h===p&&p===e&&(s=b(a,l)),s<o&&(o=s,r=l,o===0))break}if(!(e!==void 0&&o>e))return r}var v=class extends T.BaseCommand{static paths=[["scaffolder","bootstrap"]];static usage=u.Command.Usage({category:"Scaffolder commands",description:"bootstrap a new package from a template",details:"\n      This command will bootstrap a new package from a given template. Templates are sourced from the configured `scaffolderTemplateFolder`.\n\n      - If `--destination` is not set, the new package will be created under the closest matching workspace directory to the given template.\n\n      - If `--destination` is set, the new package will be created under the given directory.\n\n      - If `--destination` is set to `.`, the new package will be created under the current working directory.\n    ",examples:[["Create a new library package under the closest matching workspace directory to the given template","yarn scaffolder bootstrap --name=new-library --template=library"],["Create a new library package under the current working directory","yarn scaffolder bootstrap --name=new-library --template=library --destination=."],["Create a new library package under the given directory","yarn scaffolder bootstrap --name=new-library --template=library --destination=libraries"]]});name=u.Option.String("--name",{description:"Name of the package (in kebab-case)",required:!0});template=u.Option.String("--template",{description:"Name of the template to use to bootstrap the package",required:!0});destination=u.Option.String("--destination",{description:"Destination path of the package",required:!1});async execute(){let t=await x.Configuration.find(this.context.cwd,this.context.plugins);if(!t.projectCwd)throw new u.UsageError("This command must be run from within a project folder.");let n=N.npath.fromPortablePath(t.projectCwd),{templates:e,source:i,destination:r}=await this.#e({configuration:t,projectCwd:n});if(!(0,m.existsSync)(i))throw new u.UsageError(`Invalid template "${this.template}"; source path does not exist. Please select from: ${(0,m.readdirSync)(e).join(", ")}.`);this.#a({destination:r,projectCwd:n,source:i})}async#e({configuration:t,projectCwd:n}){let{project:e}=await x.Project.find(t,this.context.cwd),i=N.npath.fromPortablePath(this.context.cwd),r=(0,f.join)(n,e.configuration.get("scaffolderTemplateFolder")),o=(0,f.join)(r,this.template),c=j(this.template,e.topLevelWorkspace.manifest.workspaceDefinitions.map(d=>d.pattern.replace("*","").replace(new RegExp("(?<slash>\\/)(?=\\/*\\k<slash>)","v"),"").replace(new RegExp("\\/$","v"),"")));return{destination:(0,f.join)(this.destination==null?c==null?i:(0,f.join)(n,c):this.destination==="."?i:(0,f.join)(n,this.destination),this.name),source:o,templates:r}}#t({destination:t,projectCwd:n}){let e=(0,f.join)(t,"package.json"),i=JSON.parse((0,m.readFileSync)(e,{encoding:"utf8"})),r=i.name?.replace(this.template,this.name),o=t.replace(n,"").split(f.sep).join(f.posix.sep).replaceAll(new RegExp("^\\/","gv"),""),c=typeof i.repository=="object"?{...i.repository,directory:o}:i.repository;(0,m.writeFileSync)(e,JSON.stringify({...i,name:r,repository:c}))}#a({projectCwd:t,source:n,destination:e}){(0,m.cpSync)(n,e,{recursive:!0}),this.#t({destination:e,projectCwd:t}),(0,k.execSync)("yarn install",{cwd:t}),(0,k.execSync)("yarn format package.json --write",{cwd:e}),(0,k.execSync)("git add .",{cwd:e})}};var O={commands:[v],configuration:{scaffolderTemplateFolder:{default:"templates",description:"The folder containing templates from which the scaffolder bases bootstrapped packages from.",isNullable:!1,type:I.SettingsType.STRING}}},U=O;return L(q);})();
return plugin;
}
};
